<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Food System</title>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  

  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      display: flex;
      /* Remove min-height: 100vh; to allow the body to manage scrolling */
      /* Keep standard flow */
      background: #f4f4f4;
    }

    /* Layout */
    .menu-wrapper {
        width: 70%;
        padding: 0 20px 20px 20px;
        box-sizing: border-box;
        /* Crucially, remove overflow-y: auto here. Let the body scroll. */
    }
    
    .menu-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        
        /* CORRECTED STICKY HEADER for MENU */
        position: sticky; 
        top: 0; 
        background: #f4f4f4; 
        z-index: 10;
        padding-top: 20px; 
        padding-bottom: 10px;
        border-bottom: 1px solid #ddd;
    }
    .menu-header h2 {
        margin: 0;
    }

    .menu {
      background: #f4f4f4;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      justify-content: center;
      gap: 20px;
      padding-top: 10px;
    }

    .order {
      width: 30%;
      background: #fafafa;
      border-left: 2px solid #eee;
      padding: 0 20px 20px 20px;
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      
      /* Make order panel FIXED and full height to stick to the right side */
      height: 100vh; 
      position: fixed; /* Changed from sticky to fixed for consistent right-side stick */
      top: 0;
      right: 0; /* Pin it to the right edge */
    }

    /* Food Cards - (Retained styles) */
    .food {
      height: 320px;
      background: white;
      border-radius: 15px;
      padding: 10px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.15);
      text-align: center;
      cursor: pointer;
      transition: transform 0.2s;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      position: relative;
    }
    .food:hover {
      transform: scale(1.03);
    }
    .food img {
      width: 100%;
      height: 160px;
      object-fit: cover;
      border-radius: 10px;
    }
    .food h3 {
      margin: 10px 0 5px;
      font-size: 18px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .food p {
      margin: 5px 0;
      font-size: 14px;
      color: #555;
    }
    
    /* Admin Controls - (Retained styles) */
    .admin-controls {
        display: flex;
        justify-content: space-around;
        align-items: center;
        width: 100%;
        padding-top: 5px;
        border-top: 1px solid #eee;
        margin-top: 5px;
    }
    .admin-controls button {
        padding: 6px 10px;
        border: none;
        border-radius: 6px;
        font-size: 13px;
        cursor: pointer;
        transition: background 0.2s;
    }
    .edit-btn { background: #ffc107; color: #333; }
    .edit-btn:hover { background: #e0a800; }
    .remove-btn-menu { background: #dc3545; color: white; }
    .remove-btn-menu:hover { background: #c82333; }


    /* Orders */
    .order h2 {
      /* STICKY HEADER INSIDE the FIXED ORDER panel */
      position: sticky; 
      top: 0; 
      background: #fafafa;
      z-index: 10;
      padding-top: 20px;
      margin-top: 0; 
      font-size: 20px;
      border-bottom: 2px solid #eee;
      padding-bottom: 10px;
    }
    #customerChoice {
      font-weight: bold;
      margin: 10px 0;
      color: #333;
    }
    .order-list {
      flex-grow: 1;
      overflow-y: auto; /* Order list scrolls internally */
      margin-bottom: 20px;
      padding-right: 5px;
    }
    .order-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin: 8px 0;
      font-size: 16px;
      gap: 10px;
    }
    .order-name {
      cursor: pointer;
      flex-grow: 1;
    }
    .remove-btn {
      background: transparent;
      border: none;
      color: #dc3545;
      font-size: 18px;
      cursor: pointer;
    }
    .remove-btn:hover {
      color: #a71d2a;
    }
    .total {
      font-weight: bold;
      font-size: 18px;
      margin: 10px 0;
    }
    .checkout-btn {
      padding: 12px;
      font-size: 16px;
      border: none;
      background: #007bff;
      color: white;
      cursor: pointer;
      border-radius: 8px;
    }

    /* Modal - (Retained styles) */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0; top: 0;
      width: 100%; height: 100%;
      background: rgba(0,0,0,0.6);
      justify-content: center;
      align-items: center;
    }
    .modal-content {
      background: white;
      padding: 20px;
      border-radius: 15px;
      width: 320px;
      text-align: center;
      animation: popIn 0.3s ease;
    }
    @keyframes popIn {
      from { transform: scale(0.7); opacity: 0; }
      to { transform: scale(1); opacity: 1; }
    }
    
    #addItemBtn {
        background: #28a745;
        color: white;
        border: none;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        font-size: 24px;
        line-height: 1;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        transition: background 0.2s;
    }
    #addItemBtn:hover { background: #1e7e34; }

    #addMenuModal input {
        width: 90%;
        padding: 10px;
        margin: 8px 0;
        border: 1px solid #ccc;
        border-radius: 6px;
        box-sizing: border-box;
    }

    .qty-control {
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 15px 0;
      gap: 10px;
    }
    .qty-control button {
      width: 40px; height: 40px; font-size: 20px; border: none;
      background: #007bff; color: white; border-radius: 50%; cursor: pointer;
    }
    .qty-control input {
      width: 60px; text-align: center; font-size: 18px; padding: 5px;
      border: 2px solid #ddd; border-radius: 8px;
    }
    .add-btn {
      background: #28a745; color: white; padding: 10px 20px; border: none;
      border-radius: 8px; cursor: pointer; margin-top: 10px;
    }
    .close-btn {
      margin-top: 10px; background: #dc3545; color: white; padding: 10px 20px;
      border: none; border-radius: 8px; cursor: pointer;
    }

    #nameInput {
        padding: 10px; margin: 15px 0; width: 80%; border: 2px solid #ddd;
        border-radius: 8px; font-size: 16px; text-align: center;
    }

    /* Thank You Popup - (Retained styles) */
    .thankyou {
      display: none; position: fixed; z-index: 2000; top: 0; left: 0;
      width: 100%; height: 100%; background: rgba(0,0,0,0.6);
      justify-content: center; align-items: center;
    }
    .thankyou-content {
      background: white; padding: 20px; border-radius: 15px; text-align: center;
      width: 300px; animation: popIn 0.3s ease;
    }
    .thankyou-content img { max-width: 200px; margin: 15px auto; display: block; }

    /* Choice Modal Buttons - (Retained styles) */
    .choice-btn {
      padding: 10px 20px; margin: 10px; border: none; border-radius: 8px;
      cursor: pointer; font-size: 16px; color: white;
    }
    .choice-makan { background: #007bff; }
    .choice-bungkus { background: #28a745; }

    /* Responsive adjustments */
    @media (max-width: 900px) {
      body { flex-direction: column; }
      .menu-wrapper {
        width: 100%;
        padding: 20px;
      }
      .order {
        width: 100%;
        height: auto; /* Remove fixed height on mobile */
        position: static; /* Remove fixed position on mobile */
        margin-top: 20px; /* Add space between menu and order */
        border-left: none;
        padding: 20px;
      }
      .menu-header, .order h2 {
        position: sticky; 
        top: 0;
        z-index: 10;
        padding: 20px;
        /* Negate margin/padding added by parent containers */
        margin: -20px -20px 20px -20px; 
        width: auto;
      }
      .menu-header {
        background: #f4f4f4;
      }
      .order h2 {
        background: #fafafa;
      }
    }
</style>
</head>
<body>

  <div class="menu-wrapper">
    <div class="menu-header">
        <h2>Menu</h2>
        <button id="addItemBtn">+</button> </div>
    <div class="menu" id="menuContainer">
        </div>
  </div>

  <div class="order">
    <h2>Pesanan Anda</h2>
    <p id="customerChoice"></p>
    <div class="order-list" id="orderList"></div>
    <div class="total" id="totalAmount">Jumlah: RM0.00</div>
    <button class="checkout-btn" id="checkoutBtn">Selesai</button>
  </div>

  <div id="foodModal" class="modal">
    <div class="modal-content">
      <h3 id="modalFoodName"></h3>
      <p id="modalFoodPrice"></p>
      <div class="qty-control">
        <button id="decreaseQty">-</button>
        <input type="number" id="qtyInput" value="1" min="1">
        <button id="increaseQty">+</button>
      </div>
      <button class="add-btn" id="addToOrder">Tambah ke Pesanan</button><br>
      <button class="close-btn" id="closeModal">Batal</button>
    </div>
  </div>

  <div id="choiceModal" class="modal">
    <div class="modal-content">
      <h3>Makan sini atau Bungkus?</h3>
      <button class="choice-btn choice-makan" onclick="setChoice('Makan Sini')">Makan Sini</button>
      <button class="choice-btn choice-bungkus" onclick="setChoice('Bungkus')">Bungkus</button>
    </div>
  </div>

  <div id="nameModal" class="modal">
    <div class="modal-content">
      <h3>Sila masukkan nama anda</h3>
      <input type="text" id="nameInput" placeholder="Contoh: Meor Azlan">
      <button class="add-btn" id="confirmNameBtn">Sahkan Pesanan</button>
      <button class="close-btn" id="closeNameModal">Batal</button>
    </div>
  </div>
  
  <div id="addMenuModal" class="modal">
    <div class="modal-content">
        <h3>Tambah Menu Baru</h3> 
        <input type="text" id="menuNameInput" placeholder="Nama Makanan" required><br>
        <input type="number" id="menuPriceInput" placeholder="Harga (e.g., 1.50)" step="0.01" required><br>
        <input type="text" id="menuImageInput" placeholder="URL Imej (Optional)" value="https://via.placeholder.com/160" required><br>
        <button class="add-btn" id="saveMenuBtn">Simpan Menu</button><br>
        <button class="close-btn" id="closeMenuModal">Batal</button>
    </div>
  </div>

  <div id="thankyouModal" class="thankyou">
    <div class="thankyou-content">
      <h3>Terima Kasih!</h3>
      <p id="finalTotal"></p>
      <img src="Assets/qr-payment.jpg" alt="QR Payment">
      <button class="close-btn" id="closeThankyou">Tutup</button>
    </div>
  </div>

<script>
  // Supabase initialization (unchanged)
  const supabaseClient = supabase.createClient(
    'https://sdzwrpqyhxsljtnndwwz.supabase.co',
    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNkendycHF5aHhzbGp0bm5kd3d6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk1NzUzNDksImV4cCI6MjA3NTE1MTM0OX0.KwW62zUh_bfaBGO0q5-usyMtYsBrfDUbdj30zxx4Dfk'
  );

  // --- EXISTING ELEMENTS ---
  const menuContainer = document.getElementById('menuContainer');
  const modal = document.getElementById('foodModal');
  const modalFoodName = document.getElementById('modalFoodName');
  const modalFoodPrice = document.getElementById('modalFoodPrice');
  const qtyInput = document.getElementById('qtyInput');
  const increaseQtyBtn = document.getElementById('increaseQty');
  const decreaseQtyBtn = document.getElementById('decreaseQty');
  const addToOrderBtn = document.getElementById('addToOrder');
  const closeModalBtn = document.getElementById('closeModal');
  const orderList = document.getElementById('orderList');
  const totalAmount = document.getElementById('totalAmount');
  const checkoutBtn = document.getElementById('checkoutBtn');
  const thankyouModal = document.getElementById('thankyouModal');
  const finalTotal = document.getElementById('finalTotal');
  const closeThankyouBtn = document.getElementById('closeThankyou');
  const choiceModal = document.getElementById('choiceModal');
  const customerChoiceDisplay = document.getElementById('customerChoice');
  const nameModal = document.getElementById('nameModal');
  const nameInput = document.getElementById('nameInput');
  const confirmNameBtn = document.getElementById('confirmNameBtn');
  const closeNameModal = document.getElementById('closeNameModal');

  // --- NEW MENU ADMIN ELEMENTS ---
  const addItemBtn = document.getElementById('addItemBtn');
  const addMenuModal = document.getElementById('addMenuModal');
  const menuNameInput = document.getElementById('menuNameInput');
  const menuPriceInput = document.getElementById('menuPriceInput');
  const menuImageInput = document.getElementById('menuImageInput');
  const saveMenuBtn = document.getElementById('saveMenuBtn');
  const closeMenuModalBtn = document.getElementById('closeMenuModal');
  
  let currentFood = null;
  let orders = [];
  let customerChoice = null;
  let editingIndex = null;
  // NEW: Global variable to track the menu item being edited
  let editingId = null; 
  
  // ==========================================================
  // 1. DYNAMIC MENU LOADING & RENDERING
  // ==========================================================
  
  // Creates a single food card element (UPDATED)
  function renderFoodCard(item) {
    const foodDiv = document.createElement('div');
    foodDiv.className = 'food';
    foodDiv.dataset.name = item.name;
    foodDiv.dataset.price = item.price;
    foodDiv.dataset.id = item.id; // Store ID for management

    foodDiv.innerHTML = `
        <img src="${item.image_url || 'https://via.placeholder.com/160'}" alt="${item.name}" onerror="this.onerror=null; this.src='https://via.placeholder.com/160';">
        <h3>${item.name}</h3>
        <p>RM${Number(item.price).toFixed(2)}</p>
        
        <div class="admin-controls">
            <button class="edit-btn">✏️ Edit</button>
            <button class="remove-btn-menu">🗑️ Remove</button>
        </div>
    `;
    
    // Add click listener to open the quantity modal (main card area)
    foodDiv.addEventListener('click', () => {
      currentFood = {
        name: item.name,
        price: parseFloat(item.price)
      };
      if (!customerChoice) {
        choiceModal.style.display = 'flex';
      } else {
        openFoodModal();
      }
    });

    // Add click listeners for the new admin buttons (UPDATED)
    foodDiv.querySelector('.edit-btn').addEventListener('click', (e) => {
        e.stopPropagation(); // Stop the event from opening the order modal
        editMenuItem(item);
    });

    foodDiv.querySelector('.remove-btn-menu').addEventListener('click', (e) => {
        e.stopPropagation(); // Stop the event from opening the order modal
        removeMenuItem(item.id, item.name);
    });


    return foodDiv;
  }

  // Fetches menu items from Supabase and renders them (UNCHANGED)
  async function loadMenu() {
      const { data, error } = await supabaseClient
          .from('menu_items')
          .select('*')
          .order('name', { ascending: true }); // Order alphabetically

      if (error) {
          console.error("Error loading menu:", error);
          menuContainer.innerHTML = '<p style="color: red;">Error loading menu.</p>';
          return;
      }

      menuContainer.innerHTML = ''; // Clear existing menu
      if (data.length === 0) {
          menuContainer.innerHTML = '<p>No menu items available. Click + to add one.</p>';
      } else {
          data.forEach(item => {
              menuContainer.appendChild(renderFoodCard(item));
          });
      }
  }

  // ==========================================================
  // 2. MENU ADMINISTRATION LOGIC (UPDATED)
  // ==========================================================
  
  // Open modal for adding item (UPDATED to reset state)
  addItemBtn.addEventListener('click', () => {
      editingId = null; // Reset editing state
      document.querySelector('#addMenuModal h3').textContent = 'Tambah Menu Baru'; // Reset modal title
      // Clear inputs and open modal
      menuNameInput.value = '';
      menuPriceInput.value = '';
      menuImageInput.value = 'https://via.placeholder.com/160';
      addMenuModal.style.display = 'flex';
  });

  // Function to prepare the modal for editing an existing item (NEW)
  function editMenuItem(item) {
      editingId = item.id;
      menuNameInput.value = item.name;
      menuPriceInput.value = item.price;
      menuImageInput.value = item.image_url || 'https://via.placeholder.com/160';
      document.querySelector('#addMenuModal h3').textContent = `Edit Menu: ${item.name}`;
      addMenuModal.style.display = 'flex';
  }

  // Function to delete an item from Supabase (NEW)
  async function removeMenuItem(itemId, itemName) {
      if (!confirm(`Anda pasti mahu memadam "${itemName}" dari menu? Tindakan ini tidak boleh diundur.`)) {
          return;
      }
      const { error } = await supabaseClient
          .from('menu_items')
          .delete()
          .eq('id', itemId);

      if (error) {
          console.error("Error deleting menu item:", error);
          alert("Gagal memadam menu: " + error.message);
      } else {
          loadMenu(); // Refresh menu
          alert(`"${itemName}" berjaya dipadam.`);
      }
  }

  // Close modal (UPDATED to reset state)
  closeMenuModalBtn.addEventListener('click', () => {
      addMenuModal.style.display = 'none';
      editingId = null;
      document.querySelector('#addMenuModal h3').textContent = 'Tambah Menu Baru';
  });

  // Save new or existing menu item to Supabase (UPDATED)
  saveMenuBtn.addEventListener('click', async () => {
      const name = menuNameInput.value.trim();
      const price = parseFloat(menuPriceInput.value);
      const imageUrl = menuImageInput.value.trim() || 'https://via.placeholder.com/160';

      if (!name || isNaN(price) || price <= 0) {
          alert('Sila masukkan Nama dan Harga yang sah.');
          return;
      }

      // Disable button during saving
      saveMenuBtn.textContent = editingId ? 'Updating...' : 'Saving...';
      saveMenuBtn.disabled = true;

      let operation;
      if (editingId) {
          // **UPDATE** operation for existing item
          operation = supabaseClient
              .from('menu_items')
              .update({ name: name, price: price, image_url: imageUrl })
              .eq('id', editingId);
      } else {
          // **INSERT** operation for new item
          operation = supabaseClient
              .from('menu_items')
              .insert([
                  { name: name, price: price, image_url: imageUrl }
              ]);
      }

      const { error } = await operation;

      if (error) {
          console.error(`Error ${editingId ? 'updating' : 'saving'} menu item:`, error);
          alert(`Gagal ${editingId ? 'mengemas kini' : 'menyimpan'} menu: ` + error.message);
      } else {
          alert(editingId ? 'Menu item berjaya dikemas kini!' : 'Menu baru berjaya disimpan!');
          addMenuModal.style.display = 'none';
          editingId = null; // Reset editing state
          document.querySelector('#addMenuModal h3').textContent = 'Tambah Menu Baru'; // Reset modal title
          loadMenu(); // Refresh the menu display
      }

      // Re-enable button
      saveMenuBtn.textContent = 'Simpan Menu';
      saveMenuBtn.disabled = false;
  });

  // ==========================================================
  // 3. EXISTING ORDERING LOGIC (UNCHANGED)
  // ==========================================================
  
  function setChoice(choice) {
    customerChoice = choice;
    customerChoiceDisplay.textContent = `Pilihan: ${choice}`;
    choiceModal.style.display = 'none';
    openFoodModal();
  }

  function openFoodModal() {
    qtyInput.value = editingIndex !== null ? orders[editingIndex].qty : 1;
    modalFoodName.textContent = currentFood.name;
    modalFoodPrice.textContent = `Harga: RM${currentFood.price.toFixed(2)} / pc`;
    modal.style.display = 'flex';
  }

  increaseQtyBtn.addEventListener('click', () => {
    qtyInput.value = parseInt(qtyInput.value) + 1;
  });

  decreaseQtyBtn.addEventListener('click', () => {
    if (parseInt(qtyInput.value) > 1) {
      qtyInput.value = parseInt(qtyInput.value) - 1;
    }
  });

  addToOrderBtn.addEventListener('click', () => {
    const qty = parseInt(qtyInput.value);
    if (qty > 0) {
      if (editingIndex !== null) {
        orders[editingIndex].qty = qty;
        editingIndex = null;
      } else {
        // Check if item already exists to merge the order
        const existingOrderIndex = orders.findIndex(item => item.name === currentFood.name);
        
        if (existingOrderIndex > -1) {
            orders[existingOrderIndex].qty += qty;
        } else {
            orders.push({ name: currentFood.name, price: currentFood.price, qty });
        }
      }
      renderOrders();
      modal.style.display = 'none';
    }
  });

  closeModalBtn.addEventListener('click', () => {
    modal.style.display = 'none';
    editingIndex = null;
  });

  function renderOrders() {
    orderList.innerHTML = '';
    let total = 0;
    orders.forEach((order, index) => {
      const item = document.createElement('div');
      item.className = 'order-item';

      const nameSpan = document.createElement('span');
      nameSpan.className = 'order-name';
      nameSpan.textContent = `${order.qty} x ${order.name}`;
      nameSpan.onclick = () => editOrder(index);

      const priceSpan = document.createElement('span');
      priceSpan.textContent = "RM" + (order.price * order.qty).toFixed(2);

      const removeBtn = document.createElement('button');
      removeBtn.className = 'remove-btn';
      removeBtn.textContent = '🗑️';
      removeBtn.onclick = () => {
        orders.splice(index, 1);
        renderOrders();
      };

      item.appendChild(nameSpan);
      item.appendChild(priceSpan);
      item.appendChild(removeBtn);
      orderList.appendChild(item);
      total += order.price * order.qty;
    });
    totalAmount.textContent = `Jumlah: RM${total.toFixed(2)}`;
  }

  function editOrder(index) {
    currentFood = orders[index];
    editingIndex = index;
    openFoodModal();
  }

  // Checkout workflow (UNCHANGED)
  checkoutBtn.addEventListener('click', () => {
    if (orders.length === 0) {
        alert("Sila tambah item ke pesanan anda dahulu.");
        return;
    }
    nameModal.style.display = 'flex';
    nameInput.value = '';
  });

  closeNameModal.addEventListener('click', () => {
    nameModal.style.display = 'none';
  });

  confirmNameBtn.addEventListener('click', async () => {
    const customerName = nameInput.value.trim();

    if (!customerName) {
        alert("Sila masukkan nama anda untuk pesanan ini.");
        return;
    }

    nameModal.style.display = 'none';

    let total = orders.reduce((sum, order) => sum + order.price * order.qty, 0);
    finalTotal.textContent = `Jumlah Akhir: RM${total.toFixed(2)}`;
    
    // send order to supabase
    const { data, error } = await supabaseClient
      .from('orders')
      .insert([
        {
          choice: customerChoice,
          customer_name: customerName,
          items: orders,
          total: total,
          created_at: new Date().toISOString()
        }
      ]);

    if (error) {
      console.error("Failed to save order:", error);
      alert("Gagal menyimpan pesanan. Sila cuba lagi.");
    } else {
      console.log("Order saved:", data);
      thankyouModal.style.display = 'flex';
    }
  });

  closeThankyouBtn.addEventListener('click', () => {
    thankyouModal.style.display = 'none';
    orders = [];
    customerChoice = null;
    editingIndex = null;
    customerChoiceDisplay.textContent = '';
    nameInput.value = ''; 
    renderOrders();
  });
  
  // ==========================================================
  // 4. INITIALIZATION
  // ==========================================================
  // Load the menu when the page loads
  loadMenu();

</script>

</body>
</html>